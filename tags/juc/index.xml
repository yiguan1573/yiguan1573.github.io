<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUC on 亿观的博客</title>
    <link>https://yiguan1573.github.io/tags/juc/</link>
    <description>Recent content in JUC on 亿观的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 30 Nov 2021 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://yiguan1573.github.io/tags/juc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>11、CompletableFuture（JUC）</title>
      <link>https://yiguan1573.github.io/post/910completablefuture/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/910completablefuture/</guid>
      <description>JDK1.8新特性CompletableFuture总结 理解Java8里面CompletableFuture异步编程 Future和Compl</description>
    </item>
    
    <item>
      <title>10、Future（JUC）</title>
      <link>https://yiguan1573.github.io/post/909future/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/909future/</guid>
      <description>简介 Future是java 1.5引入的一个interface，可以方便的用于异步结果的获取。 方法 get（）方法可以当任务结束后返回一个结果，</description>
    </item>
    
    <item>
      <title>7、JUC辅助类（JUC）</title>
      <link>https://yiguan1573.github.io/post/897juc%E8%BE%85%E5%8A%A9%E7%B1%BB/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/897juc%E8%BE%85%E5%8A%A9%E7%B1%BB/</guid>
      <description>减少计数CountDownLatch CountDownLatch(int count)构造一个用给定计数初始化的CountDownLatch在这里插入代码片 两个常用的主要方法 await()</description>
    </item>
    
    <item>
      <title>8、阻塞队列（JUC）</title>
      <link>https://yiguan1573.github.io/post/898%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/898%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</guid>
      <description>BlockingQueue 简介 阻塞队列是共享队列（多线程操作），一端输入，一端输出 不能无限放队列，满了之后就会进入阻塞，取出也同理 当队列是空的，从队列中获取元素的操</description>
    </item>
    
    <item>
      <title>9、线程池（JUC）</title>
      <link>https://yiguan1573.github.io/post/899%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Wed, 13 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/899%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>概述 线程池（英语：thread pool）：一种线程使用模式。线程过多会带来调度开销，进而影响缓存局部性和整体性能。而线程池维护着多个线程，等</description>
    </item>
    
    <item>
      <title>6、Callable接口（JUC）</title>
      <link>https://yiguan1573.github.io/post/896callable%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Tue, 12 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/896callable%E6%8E%A5%E5%8F%A3/</guid>
      <description>简介 创建线程的多种方式： 继承Thread类 实现Runnable接口 Callable接口 线程池 Runnable 缺少的一项功能是，当线程终止时（即 run（）完</description>
    </item>
    
    <item>
      <title>5、多线程锁（JUC）</title>
      <link>https://yiguan1573.github.io/post/895%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%94%81/</link>
      <pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/895%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%94%81/</guid>
      <description>Synchronized锁的作用域 synchronized实现同步的基础:Java中的每一个对象都可以作为锁，具体表现为以下3种形式。 对于普</description>
    </item>
    
    <item>
      <title>4、集合的线程安全（JUC）</title>
      <link>https://yiguan1573.github.io/post/894%E9%9B%86%E5%90%88%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/894%E9%9B%86%E5%90%88%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</guid>
      <description>前沿 创建集合 List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); 创建30个线程向集合中添加元素 for (int i = 0; i &amp;lt;30; i++) { new Thread(()-&amp;gt;{ //向集合添加内容 list.add(UUID.randomUUID().toString().substring(0,8)); System.out.println(list); },String.valueOf(i)).start(); } java.util.Concurrent</description>
    </item>
    
    <item>
      <title>3、线程间通信（JUC）</title>
      <link>https://yiguan1573.github.io/post/893%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/893%E7%BA%BF%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</guid>
      <description>概述 线程间通信的模型有两种：共享内存和消息传递 线程间的通信具体步骤 创建资源类，在资源类中船舰属性和操作方法 在资源类操作方法：判断、操作、通知</description>
    </item>
    
    <item>
      <title>2、Lock接口（JUC）</title>
      <link>https://yiguan1573.github.io/post/892lock%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Fri, 08 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/892lock%E6%8E%A5%E5%8F%A3/</guid>
      <description>Synchronized synchronized 是 Java 中的关键字，是一种同步锁。它修饰的对象有以下几种： 修饰一个代码块，被修饰的代码块称为同步语句块，其作用的范围是大括号{}括起来的代码</description>
    </item>
    
    <item>
      <title>1、JUC概述（JUC）</title>
      <link>https://yiguan1573.github.io/post/891juc%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/891juc%E6%A6%82%E8%BF%B0/</guid>
      <description>简介 在 Java 中，线程部分是一个重点，本篇文章说的 JUC 也是关于线程的。JUC 就是 java.util .concurrent 工具包的简称。这是一个处理线程的工具包，JDK 1.5 开始出现的。 进程</description>
    </item>
    
  </channel>
</rss>