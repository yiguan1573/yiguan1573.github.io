<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on 亿观的博客</title>
    <link>https://yiguan1573.gitee.io/tags/jvm/</link>
    <description>Recent content in JVM on 亿观的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 11 Sep 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://yiguan1573.gitee.io/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>27、使用OQL语言查询对象信息（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1067%E4%BD%BF%E7%94%A8oql%E8%AF%AD%E8%A8%80%E6%9F%A5%E8%AF%A2%E5%AF%B9%E8%B1%A1%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1067%E4%BD%BF%E7%94%A8oql%E8%AF%AD%E8%A8%80%E6%9F%A5%E8%AF%A2%E5%AF%B9%E8%B1%A1%E4%BF%A1%E6%81%AF/</guid>
      <description>MAT 支持一种类似于 SQL 的查询语言 OQL（Object Query Language）。OQL 使用类 SQL 语法，可以在堆中进行对象的查找和筛选。 1. SELECT 子句 在 MAT 中，S</description>
    </item>
    
    <item>
      <title>26、OOM常见各种场景及解决方案（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1066%E6%B5%85%E5%A0%86%E6%B7%B1%E5%A0%86%E4%B8%8E%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</link>
      <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1066%E6%B5%85%E5%A0%86%E6%B7%B1%E5%A0%86%E4%B8%8E%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</guid>
      <description>1. 浅堆（Shallow Heap） 浅堆是指一个对象所消耗的内存。在 32 位系统中，一个对象引用会占据 4 个字节，一个 int 类型会占据 4 个字节，long 型</description>
    </item>
    
    <item>
      <title>25、分析GC日志（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1065%E5%88%86%E6%9E%90gc%E6%97%A5%E5%BF%97/</link>
      <pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1065%E5%88%86%E6%9E%90gc%E6%97%A5%E5%BF%97/</guid>
      <description>5.1. GC 分类 针对 HotSpot VM 的实现，它里面的 GC 按照回收区域又分为两大种类型：一种是部分收集（Partial GC），一种是整堆收集（Full GC） 部分收集</description>
    </item>
    
    <item>
      <title>24、JVM运行时参数（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1064jvm%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%82%E6%95%B0/</link>
      <pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1064jvm%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8F%82%E6%95%B0/</guid>
      <description>4.1. JVM 参数选项 官网地址：https://docs.oracle.com/javase/8/docs/technotes/tools/windo</description>
    </item>
    
    <item>
      <title>23、JVM监控及诊断工具-GUI（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1063jvm%E7%9B%91%E6%8E%A7%E5%8F%8A%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-gui/</link>
      <pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1063jvm%E7%9B%91%E6%8E%A7%E5%8F%8A%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-gui/</guid>
      <description>3.1. 工具概述 使用上一章命令行工具或组合能帮您获取目标 Java 应用性能相关的基础信息，但它们存在下列局限： 1．无法获取方法级别的分析数据，如方法间的调</description>
    </item>
    
    <item>
      <title>22、JVM监控及诊断工具-命令行（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1062jvm%E7%9B%91%E6%8E%A7%E5%8F%8A%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-%E5%91%BD%E4%BB%A4%E8%A1%8C/</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1062jvm%E7%9B%91%E6%8E%A7%E5%8F%8A%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7-%E5%91%BD%E4%BB%A4%E8%A1%8C/</guid>
      <description>2.1. 概述 性能诊断是软件工程师在日常工作中需要经常面对和解决的问题，在用户体验至上的今天，解决好应用的性能问题能带来非常大的收益。 Java 作为最流行的</description>
    </item>
    
    <item>
      <title>21、概述篇（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1061%E6%A6%82%E8%BF%B0%E7%AF%87/</link>
      <pubDate>Mon, 05 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1061%E6%A6%82%E8%BF%B0%E7%AF%87/</guid>
      <description>1.1. 大厂面试题 支付宝：支付宝三面：JVM 性能调优都做了什么？ 小米：有做过 JVM 内存优化吗？ 从 SQL、JVM、架构、数据库四个方面讲讲优化思路 蚂蚁金</description>
    </item>
    
    <item>
      <title>20、再谈类的加载器（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1060%E5%86%8D%E8%B0%88%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/</link>
      <pubDate>Sun, 04 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1060%E5%86%8D%E8%B0%88%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%99%A8/</guid>
      <description>概述 类加载器是 JVM 执行类加载机制的前提。 ClassLoader 的作用： ClassLoader 是 Java 的核心组件，所有的 Class 都是由 ClassLoader 进行加载的，ClassLoader 负责通过各种方式将 Class 信息</description>
    </item>
    
    <item>
      <title>19、类的加载过程详解（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1059%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 03 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1059%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</guid>
      <description>概述 在 Java 中数据类型分为基本数据类型和引用数据类型。基本数据类型由虚拟机预先定义，引用数据类型则需要进行类的加载。 按照 Java 虚拟机规范，从 Class 文件到</description>
    </item>
    
    <item>
      <title>18、字节码指令集与解析举例（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1058%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4%E9%9B%86%E4%B8%8E%E8%A7%A3%E6%9E%90%E4%B8%BE%E4%BE%8B/</link>
      <pubDate>Fri, 02 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1058%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4%E9%9B%86%E4%B8%8E%E8%A7%A3%E6%9E%90%E4%B8%BE%E4%BE%8B/</guid>
      <description>这章主要是方法体的内容，即Code属性 概述 Java 字节码对于虚拟机，就好像汇编语言对于计算机，属于基本执行命令。 Java 虚拟机的指令由一个字节长度的、代</description>
    </item>
    
    <item>
      <title>17、Class文件结构（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1057class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1057class%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</guid>
      <description>引言 笔记来源JVM中篇 概述 字节码文件的跨平台性 Java 语言：跨平台的语言（write once, run anywhere） 当Java源代码成功编译成字节码之后，如</description>
    </item>
    
    <item>
      <title>16、垃圾回收器（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1056%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</link>
      <pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1056%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8/</guid>
      <description>GC 分类与性能指标 垃圾回收器概述 垃圾收集器没有在规范中进行过多的规定，可以由不同的厂商、不同版本的JVM来实现。 由于JDK的版本处于高速迭代过</description>
    </item>
    
    <item>
      <title>15、垃圾回收相关概念（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1055%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1055%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</guid>
      <description>System.gc() 的理解 在默认情况下，通过System.gc()者Runtime.getRuntime().gc() 的调用，会显式触发Full GC，同时对老</description>
    </item>
    
    <item>
      <title>14、垃圾回收概述和相关算法（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1054%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0%E5%92%8C%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1054%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%A6%82%E8%BF%B0%E5%92%8C%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95/</guid>
      <description>垃圾回收概述 Java 和 C++语言的区别，就在于垃圾收集技术和内存动态分配上，C++语言没有垃圾收集技术，需要程序员手动的收集。 垃圾收集，不是Jav</description>
    </item>
    
    <item>
      <title>13、StringTable(字符串常量池)（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1053stringtable%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1053stringtable%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/</guid>
      <description>String的基本特性 String：字符串，使用一对 “” 引起来表示 String s1 = &amp;#34;atguigu&amp;#34; ; // 字面量的定义方式 String s2 = new String(&amp;#34;hello&amp;#34;); // new 对象的方式 String被声明为f</description>
    </item>
    
    <item>
      <title>12、执行引擎（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1052%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</link>
      <pubDate>Fri, 01 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1052%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</guid>
      <description>执行引擎概述 执行引擎概述 执行引擎是Java虚拟机核心的组成部分之一。 “虚拟机”是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区</description>
    </item>
    
    <item>
      <title>11、直接内存（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1051%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</link>
      <pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1051%E7%9B%B4%E6%8E%A5%E5%86%85%E5%AD%98/</guid>
      <description>直接内存概述 不是虚拟机运行时数据区的一部分，也不是《Java虚拟机规范》中定义的内存区域。 直接内存是在Java堆外的、直接向系统申请的内存区</description>
    </item>
    
    <item>
      <title>10、对象的实例化内存布局与访问定位（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1050%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/</link>
      <pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1050%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E4%B8%8E%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D/</guid>
      <description>对象的实例化 大厂面试题 美团： 对象在JVM中是怎么存储的？ 对象头信息里面有哪些东西？ 蚂蚁金服： 二面：java对象头里有什么 对象创建的方式 new</description>
    </item>
    
    <item>
      <title>9、方法区（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1049%E6%96%B9%E6%B3%95%E5%8C%BA/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1049%E6%96%B9%E6%B3%95%E5%8C%BA/</guid>
      <description>栈、堆、方法区的交互关系 从线程共享与否的角度来看 ThreadLocal：如何保证多个线程在并发环境下的安全性？典型场景就是数据库连接管理，以</description>
    </item>
    
    <item>
      <title>8、堆（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1048%E5%A0%86/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1048%E5%A0%86/</guid>
      <description>堆的核心概述 堆与进程 堆针对一个JVM进程来说是唯一的。也就是一个进程只有一个JVM实例，一个JVM实例中就有一个运行时数据区，一个运行时数据</description>
    </item>
    
    <item>
      <title>7、本地方法栈（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1047%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</link>
      <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1047%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88/</guid>
      <description>本地方法栈 Java虚拟机栈于管理Java方法的调用，而本地方法栈用于管理本地方法的调用。 本地方法栈，也是线程私有的。 允许被实现成固定或者是可</description>
    </item>
    
    <item>
      <title>6、本地方法接口（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1046%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1046%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%8E%A5%E5%8F%A3/</guid>
      <description>本地方法 简单地讲，一个Native Method是一个Java调用非Java代码的接囗一个Native Method是这样一个Java方法：该方</description>
    </item>
    
    <item>
      <title>5、虚拟机栈（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1045%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</link>
      <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1045%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88/</guid>
      <description>简介 虚拟机栈的出现背景 由于跨平台性的设计，Java的指令都是根据栈来设计的。不同平台CPU架构不同，所以不能设计为基于寄存器的【如果设计成基</description>
    </item>
    
    <item>
      <title>4、程序计数器（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1044%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1044%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8/</guid>
      <description>PC寄存器介绍 官方文档网址：https://docs.oracle.com/javase/specs/jvms/se8/html/index</description>
    </item>
    
    <item>
      <title>3、运行时数据区（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1043%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</link>
      <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1043%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA/</guid>
      <description>此章把运行时数据区里比较少的地方讲一下。虚拟机栈，堆，方法区这些地方后续再讲。 运行时数据区概述及线程 前言 本节主要讲的是运行时数据区，也就是下</description>
    </item>
    
    <item>
      <title>2、类加载子系统（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1042%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1042%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%AD%90%E7%B3%BB%E7%BB%9F/</guid>
      <description>内存结构概述 简图 详细图 英文版 中文版 注意：方法区只有HotSpot虚拟机有，J9，JRockit都没有 如果自己想手写一个Java虚拟机的话，主</description>
    </item>
    
    <item>
      <title>1、JVM与Java体系结构（JVM）</title>
      <link>https://yiguan1573.gitee.io/post/1041jvm%E4%B8%8Ejava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.gitee.io/post/1041jvm%E4%B8%8Ejava%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</guid>
      <description>前言 你是否也遇到过这些问题？ 运行着的线上系统突然卡死，系统无法访问，甚至直接OOM！ 想解决线上JVM GC问题，但却无从下手。 新项目上线，对各</description>
    </item>
    
  </channel>
</rss>