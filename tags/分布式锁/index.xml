<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分布式锁 on 亿观的博客</title>
    <link>https://yiguan1573.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
    <description>Recent content in 分布式锁 on 亿观的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 02 Dec 2022 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://yiguan1573.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>4、基于MySQL实现分布式锁（分布式锁）</title>
      <link>https://yiguan1573.github.io/post/1106%E5%9F%BA%E4%BA%8Emysql%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Fri, 02 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/1106%E5%9F%BA%E4%BA%8Emysql%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>基于MysQL关系型数据库实现:唯一键索引 redis:基于Key唯一性 zk:基于znode节点唯一性 简单实现 建表 思路 实现 问题 服务器宕机防死锁</description>
    </item>
    
    <item>
      <title>3、基于zookeeper实现分布式锁（分布式锁）</title>
      <link>https://yiguan1573.github.io/post/1105%E5%9F%BA%E4%BA%8Ezookeeper%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/1105%E5%9F%BA%E4%BA%8Ezookeeper%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>zookeeper回顾 官方客户端 引入依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.apache.zookeeper&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;zookeeper&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.5.7&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 代码 public class ZKTest { public static void main(String[] args) { ZooKeeper zooKeeper = null; //zookeeper获取连接是一个慢启动的过程 CountDownLatch countDownLatch = new CountDownLatch(1);</description>
    </item>
    
    <item>
      <title>2、基于redis实现分布式锁（分布式锁）</title>
      <link>https://yiguan1573.github.io/post/1104%E5%9F%BA%E4%BA%8Eredis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/1104%E5%9F%BA%E4%BA%8Eredis%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>redis中的超卖现象 设置库存5000 修改代码 @Service public class StockService { @Autowired StockMapper stockMapper; @Autowired RedisTemplate redisTemplate; private ReentrantLock lock = new ReentrantLock(); // @Transactional public void reduce(){ //1.查询库存 Integer stock = (Integer) redisTemplate.opsForValue().get(&amp;#34;stock&amp;#34;); //2.判断库存是否充足</description>
    </item>
    
    <item>
      <title>1、JVM锁和MySQL锁（分布式锁）</title>
      <link>https://yiguan1573.github.io/post/1103jvm%E9%94%81%E5%92%8Cmysql%E9%94%81/</link>
      <pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://yiguan1573.github.io/post/1103jvm%E9%94%81%E5%92%8Cmysql%E9%94%81/</guid>
      <description>搭建简单的库存项目 @Data public class Stock { private Integer stock = 5000; } //StockService为单例对象，所以里面创建的stock对象也为单例 @Service public class StockService { private Stock stock = new Stock(); public</description>
    </item>
    
  </channel>
</rss>